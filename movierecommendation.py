# -*- coding: utf-8 -*-
"""MovieRecommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PbfZiVsKXkWm4T2Pltm44uYDU5rPgW6j
"""

# Counting number of words and storing in 2D array
text = ['London Paris London','Paris Paris London']
from sklearn.feature_extraction.text import CountVectorizer 
cv = CountVectorizer()
cv_fit = cv.fit_transform(text)
#print (cv_fit.toarray())

#finding similarity score between 2 vectors
from sklearn.metrics.pairwise import cosine_similarity
similarity_scores = cosine_similarity(cv_fit)
print(similarity_scores)

# Read CSV file using pandas
import pandas as pd
df = pd.read_csv("movie_dataset.csv")
#print(df.head())
#print(df.columns)

# Selecting features 
features = ['keywords','cast','genres','director']
# Create a column in df which combines all features

for feature in features :
  df[feature ] = df[features].fillna('')

def get_title_from_index(index):
	return df[df.index == index]["title"].values[0]


def combine_features(row):
  return row['keywords'] + ' ' + row['cast'] + " " + row['genres'] + " " + row['director']

df["combined_features"] = df.apply(combine_features,axis = 1)
#print(df['combined_features'].head())

# count number of words
cv = CountVectorizer()
count = cv.fit_transform(df['combined_features'])
cosine_sim = cosine_similarity(count)

movie_user_likes = input('enter movie name')

# getting index of this movie

index_movie = df[df.title == movie_user_likes]["index"].values[0]
similar_movies = list(enumerate(cosine_sim[index_movie]))

#sorting similar movies 

sorted_sim_movies = sorted(similar_movies,key = lambda x:x[1],reverse = True)

#Printing movies similar to first one
i = 0
for movie in sorted_sim_movies:
  print(get_title_from_index(movie[0]))
  i = i+1
  if i>50:
    break

